services:
  server:
    build:
      context: ./server
    container_name: profiletech-server
    environment:
      - NODE_ENV=production
      - PORT=4300
      - JWT_SECRET=${JWT_SECRET:-change_me}
      - DATABASE_URL=${DATABASE_URL:-file:/app/server/data/dev.db}
      - CLIENT_URL=${CLIENT_URL:-http://localhost:8080}
      - ADMIN_EMAIL=${ADMIN_EMAIL:-admin@example.com}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-password}
    volumes:
      # Persist only the SQLite database in a dedicated data dir (avoid overlaying migrations)
      - server_data:/app/server/data
      # Shared uploads volume mounted also in client for serving images
      - uploads:/app/client/public/assets/profile
    ports:
      - "4300:4300"
    healthcheck:
      test: ["CMD", "node", "-e", "fetch('http://localhost:4300/api/health').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))"]
      interval: 10s
      timeout: 5s
      retries: 5
    # server does not depend on client container

  client:
    build:
      context: ./client
      args:
        # Point client to server API via reverse proxy as same-origin
        - VITE_API_URL=${VITE_API_URL:-/api}
    container_name: profiletech-client
    environment:
      - VITE_API_URL=${VITE_API_URL:-/api}
    volumes:
      # Serve uploaded profile images from shared volume
      - uploads:/usr/share/nginx/html/assets/profile

  gateway:
    image: public.ecr.aws/docker/library/nginx:1.27-alpine
    container_name: profiletech-gateway
    volumes:
      - ./gateway/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "8080:80"
    depends_on:
      - client
      - server

volumes:
  server_data:
  uploads:
